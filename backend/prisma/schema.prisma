// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// using PostGIS extension for Location

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique @db.VarChar(255)
  username   String  @unique @db.VarChar(30)
  name       String? @db.VarChar(255)
  bio        String? @db.VarChar(255)
  password   String
  profilePic String  @default("defaultProfile.jpg")

  isPrivate Boolean @default(false) // for private accounts
  isDeleted Boolean @default(false) // for soft deleting accounts

  followedBy Follows[] @relation("followedBy") // list of who follows this user
  following  Follows[] @relation("following") // list of who this user follows

  createdItineraries Itinerary[] @relation("createdItineraries")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verifiedAt DateTime? // NULL until email is verified

  @@index([email])
  @@index([username])
}

model Follows {
  followedById String
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followingId  String
  following    User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  status FollowStatus @default(notFollowing)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followedById, followingId])
  // indexes for improving query performance
  @@index([followedById, status])
  @@index([followingId, status])
}

enum FollowStatus {
  pending
  accepted
  notFollowing
}

model Itinerary {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  description String?
  startDate   DateTime?
  endDate     DateTime?

  media Media[] @relation("itineraryMedia")

  isArchived Boolean @default(false)

  // each itinerary has a list of itinerary items
  itineraryItems ItineraryItem[] @relation("itineraryItem")

  // each itinerary has an owner
  ownerId String
  owner   User   @relation("createdItineraries", fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model ItineraryItem {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(255)
  description String?
  cost        Float?
  currency    String? @default("CAD")

  media Media[] @relation("itineraryItemMedia")

  location Location? @relation("itineraryItemLocation")

  order Int // for ordering list of items in Itinerary

  // each itinerary item belongs to an itinerary
  itineraryId String
  itinerary   Itinerary @relation("itineraryItem", fields: [itineraryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itineraryId, order])
  @@index([itineraryId])
}

model Location {
  id String @id @default(cuid())

  // each location associated with an itinerary item
  itineraryItemId String        @unique
  itineraryItem   ItineraryItem @relation("itineraryItemLocation", fields: [itineraryItemId], references: [id], onDelete: Cascade)

  coordinates Unsupported("geometry(Point, 4326)")

  // optional fields to include in a location
  country String? @db.VarChar(255)
  city    String? @db.VarChar(255)
  address String?

  // GiST index
  @@index([coordinates], name: "location_idx", type: Gist)
  @@index([itineraryItemId])
}

model Media {
  id String @id @default(cuid())

  thumbnail String
  feed      String

  itinerary       Itinerary?     @relation("itineraryMedia", fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId     String?
  itineraryItem   ItineraryItem? @relation("itineraryItemMedia", fields: [itineraryItemId], references: [id], onDelete: Cascade)
  itineraryItemId String?
}
