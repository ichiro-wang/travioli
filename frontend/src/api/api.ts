/* tslint:disable */
/* eslint-disable */
/**
 * Backend API
 * This is the backend API. This doc was generated on 2025-08-22.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthLoginPostRequest
 */
export interface AuthLoginPostRequest {
    /**
     * A valid email address
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'email': string;
    /**
     * A password with minimum 8 characters
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthResendVerificationEmailPostRequest
 */
export interface AuthResendVerificationEmailPostRequest {
    /**
     * A valid email address
     * @type {string}
     * @memberof AuthResendVerificationEmailPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthSignupPostRequest
 */
export interface AuthSignupPostRequest {
    /**
     * A valid email address
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'email': string;
    /**
     * A username with letters, numbers, and underscores
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'username': string;
    /**
     * A password with minimum 8 characters
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'password': string;
    /**
     * A password with minimum 8 characters
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface CheckUsernameResponse
 */
export interface CheckUsernameResponse {
    /**
     * 
     * @type {string}
     * @memberof CheckUsernameResponse
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof CheckUsernameResponse
     */
    'available': boolean;
}
/**
 * A simple error response with a message, and optional array of errors
 * @export
 * @interface ErrorResponseMessage
 */
export interface ErrorResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseMessage
     */
    'message': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ErrorResponseMessage
     */
    'errors'?: Array<string>;
}
/**
 * 
 * @export
 * @interface FilteredUser
 */
export interface FilteredUser {
    /**
     * User ID
     * @type {string}
     * @memberof FilteredUser
     */
    'id': string;
    /**
     * A username with letters, numbers, and underscores
     * @type {string}
     * @memberof FilteredUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof FilteredUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FilteredUser
     */
    'bio': string;
    /**
     * 
     * @type {string}
     * @memberof FilteredUser
     */
    'profilePic': string;
    /**
     * 
     * @type {boolean}
     * @memberof FilteredUser
     */
    'isPrivate': boolean;
    /**
     * A valid email address
     * @type {string}
     * @memberof FilteredUser
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GetProfileResponse
 */
export interface GetProfileResponse {
    /**
     * 
     * @type {FilteredUser}
     * @memberof GetProfileResponse
     */
    'user': FilteredUser;
    /**
     * 
     * @type {boolean}
     * @memberof GetProfileResponse
     */
    'isSelf': boolean;
    /**
     * 
     * @type {number}
     * @memberof GetProfileResponse
     */
    'followedByCount': number;
    /**
     * 
     * @type {number}
     * @memberof GetProfileResponse
     */
    'followingCount': number;
    /**
     * 
     * @type {string}
     * @memberof GetProfileResponse
     */
    'followStatus'?: GetProfileResponseFollowStatusEnum;
}

export const GetProfileResponseFollowStatusEnum = {
    Pending: 'pending',
    Accepted: 'accepted',
    NotFollowing: 'notFollowing'
} as const;

export type GetProfileResponseFollowStatusEnum = typeof GetProfileResponseFollowStatusEnum[keyof typeof GetProfileResponseFollowStatusEnum];

/**
 * 
 * @export
 * @interface GetUserItinerariesResponse
 */
export interface GetUserItinerariesResponse {
    /**
     * 
     * @type {Array<GetUserItinerariesResponseItinerariesInner>}
     * @memberof GetUserItinerariesResponse
     */
    'itineraries': Array<GetUserItinerariesResponseItinerariesInner>;
    /**
     * 
     * @type {GetUserItinerariesResponsePagination}
     * @memberof GetUserItinerariesResponse
     */
    'pagination': GetUserItinerariesResponsePagination;
}
/**
 * 
 * @export
 * @interface GetUserItinerariesResponseItinerariesInner
 */
export interface GetUserItinerariesResponseItinerariesInner {
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'currency': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'isArchived': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'ownerId': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserItinerariesResponseItinerariesInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetUserItinerariesResponsePagination
 */
export interface GetUserItinerariesResponsePagination {
    /**
     * 
     * @type {number}
     * @memberof GetUserItinerariesResponsePagination
     */
    'loadIndex': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserItinerariesResponsePagination
     */
    'hasMore': boolean;
}
/**
 * Internal server error response
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'errorLocation'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {FilteredUser}
     * @memberof LoginResponse
     */
    'user': FilteredUser;
}
/**
 * A simple response with a message
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface UsersMeDelete200Response
 */
export interface UsersMeDelete200Response {
    /**
     * 
     * @type {UsersMeDelete200ResponseUser}
     * @memberof UsersMeDelete200Response
     */
    'user': UsersMeDelete200ResponseUser;
}
/**
 * 
 * @export
 * @interface UsersMeDelete200ResponseUser
 */
export interface UsersMeDelete200ResponseUser {
    /**
     * User ID
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'id': string;
    /**
     * A username with letters, numbers, and underscores
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'bio': string;
    /**
     * 
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'profilePic': string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersMeDelete200ResponseUser
     */
    'isPrivate': boolean;
    /**
     * A valid email address
     * @type {string}
     * @memberof UsersMeDelete200ResponseUser
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersMeDelete200ResponseUser
     */
    'isDeleted': boolean;
}
/**
 * 
 * @export
 * @interface UsersMeDeleteRequest
 */
export interface UsersMeDeleteRequest {
    /**
     * A password with minimum 8 characters
     * @type {string}
     * @memberof UsersMeDeleteRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UsersMePatch200Response
 */
export interface UsersMePatch200Response {
    /**
     * 
     * @type {FilteredUser}
     * @memberof UsersMePatch200Response
     */
    'user': FilteredUser;
}
/**
 * 
 * @export
 * @interface UsersMePatchRequest
 */
export interface UsersMePatchRequest {
    /**
     * A username with letters, numbers, and underscores
     * @type {string}
     * @memberof UsersMePatchRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMePatchRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersMePatchRequest
     */
    'bio'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login a user
         * @param {AuthLoginPostRequest} [authLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (authLoginPostRequest?: AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend verification email
         * @param {AuthResendVerificationEmailPostRequest} [authResendVerificationEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResendVerificationEmailPost: async (authResendVerificationEmailPostRequest?: AuthResendVerificationEmailPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/resend-verification-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResendVerificationEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signup a user
         * @param {AuthSignupPostRequest} [authSignupPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost: async (authSignupPostRequest?: AuthSignupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify email
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmailGet: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authVerifyEmailGet', 'token', token)
            const localVarPath = `/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if a username is available
         * @param {string} username A username with letters, numbers, and underscores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCheckUsernameGet: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersCheckUsernameGet', 'username', username)
            const localVarPath = `/users/check-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Profile
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the itineraries of a user
         * @param {string} id User ID
         * @param {string} [loadIndex] A positive integer to specify which entries to retrieve for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdItinerariesGet: async (id: string, loadIndex?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdItinerariesGet', 'id', id)
            const localVarPath = `/users/{id}/itineraries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loadIndex !== undefined) {
                localVarQueryParameter['loadIndex'] = loadIndex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete own account
         * @param {UsersMeDeleteRequest} [usersMeDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeDelete: async (usersMeDeleteRequest?: UsersMeDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersMeDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update own profile
         * @param {UsersMePatchRequest} [usersMePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch: async (usersMePatchRequest?: UsersMePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersMePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Login a user
         * @param {AuthLoginPostRequest} [authLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(authLoginPostRequest?: AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(authLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authRefreshGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resend verification email
         * @param {AuthResendVerificationEmailPostRequest} [authResendVerificationEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResendVerificationEmailPost(authResendVerificationEmailPostRequest?: AuthResendVerificationEmailPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResendVerificationEmailPost(authResendVerificationEmailPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authResendVerificationEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Signup a user
         * @param {AuthSignupPostRequest} [authSignupPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignupPost(authSignupPostRequest?: AuthSignupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignupPost(authSignupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verify email
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyEmailGet(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyEmailGet(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authVerifyEmailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check if a username is available
         * @param {string} username A username with letters, numbers, and underscores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCheckUsernameGet(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckUsernameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCheckUsernameGet(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersCheckUsernameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get User Profile
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the itineraries of a user
         * @param {string} id User ID
         * @param {string} [loadIndex] A positive integer to specify which entries to retrieve for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdItinerariesGet(id: string, loadIndex?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserItinerariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdItinerariesGet(id, loadIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersIdItinerariesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete own account
         * @param {UsersMeDeleteRequest} [usersMeDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeDelete(usersMeDeleteRequest?: UsersMeDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersMeDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeDelete(usersMeDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersMeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update own profile
         * @param {UsersMePatchRequest} [usersMePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMePatch(usersMePatchRequest?: UsersMePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersMePatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMePatch(usersMePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.usersMePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Login a user
         * @param {AuthLoginPostRequest} [authLoginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(authLoginPostRequest?: AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.authLoginPost(authLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessage> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Get me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet(options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.authMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshGet(options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessage> {
            return localVarFp.authRefreshGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Resend verification email
         * @param {AuthResendVerificationEmailPostRequest} [authResendVerificationEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResendVerificationEmailPost(authResendVerificationEmailPostRequest?: AuthResendVerificationEmailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessage> {
            return localVarFp.authResendVerificationEmailPost(authResendVerificationEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Signup a user
         * @param {AuthSignupPostRequest} [authSignupPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost(authSignupPostRequest?: AuthSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessage> {
            return localVarFp.authSignupPost(authSignupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify email
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmailGet(token: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseMessage> {
            return localVarFp.authVerifyEmailGet(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a username is available
         * @param {string} username A username with letters, numbers, and underscores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCheckUsernameGet(username: string, options?: RawAxiosRequestConfig): AxiosPromise<CheckUsernameResponse> {
            return localVarFp.usersCheckUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Profile
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProfileResponse> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the itineraries of a user
         * @param {string} id User ID
         * @param {string} [loadIndex] A positive integer to specify which entries to retrieve for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdItinerariesGet(id: string, loadIndex?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetUserItinerariesResponse> {
            return localVarFp.usersIdItinerariesGet(id, loadIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete own account
         * @param {UsersMeDeleteRequest} [usersMeDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeDelete(usersMeDeleteRequest?: UsersMeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersMeDelete200Response> {
            return localVarFp.usersMeDelete(usersMeDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update own profile
         * @param {UsersMePatchRequest} [usersMePatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch(usersMePatchRequest?: UsersMePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersMePatch200Response> {
            return localVarFp.usersMePatch(usersMePatchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Login a user
     * @param {AuthLoginPostRequest} [authLoginPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLoginPost(authLoginPostRequest?: AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLoginPost(authLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authMeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authRefreshGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authRefreshGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend verification email
     * @param {AuthResendVerificationEmailPostRequest} [authResendVerificationEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authResendVerificationEmailPost(authResendVerificationEmailPostRequest?: AuthResendVerificationEmailPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authResendVerificationEmailPost(authResendVerificationEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signup a user
     * @param {AuthSignupPostRequest} [authSignupPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authSignupPost(authSignupPostRequest?: AuthSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authSignupPost(authSignupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify email
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authVerifyEmailGet(token: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authVerifyEmailGet(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if a username is available
     * @param {string} username A username with letters, numbers, and underscores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersCheckUsernameGet(username: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersCheckUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User Profile
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the itineraries of a user
     * @param {string} id User ID
     * @param {string} [loadIndex] A positive integer to specify which entries to retrieve for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersIdItinerariesGet(id: string, loadIndex?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersIdItinerariesGet(id, loadIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete own account
     * @param {UsersMeDeleteRequest} [usersMeDeleteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersMeDelete(usersMeDeleteRequest?: UsersMeDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersMeDelete(usersMeDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update own profile
     * @param {UsersMePatchRequest} [usersMePatchRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersMePatch(usersMePatchRequest?: UsersMePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).usersMePatch(usersMePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



